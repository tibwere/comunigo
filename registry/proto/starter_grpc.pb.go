// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StarterClient is the client API for Starter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StarterClient interface {
	StartComunication(ctx context.Context, opts ...grpc.CallOption) (Starter_StartComunicationClient, error)
}

type starterClient struct {
	cc grpc.ClientConnInterface
}

func NewStarterClient(cc grpc.ClientConnInterface) StarterClient {
	return &starterClient{cc}
}

func (c *starterClient) StartComunication(ctx context.Context, opts ...grpc.CallOption) (Starter_StartComunicationClient, error) {
	stream, err := c.cc.NewStream(ctx, &Starter_ServiceDesc.Streams[0], "/proto.Starter/StartComunication", opts...)
	if err != nil {
		return nil, err
	}
	x := &starterStartComunicationClient{stream}
	return x, nil
}

type Starter_StartComunicationClient interface {
	Send(*Member) error
	CloseAndRecv() (*Ack, error)
	grpc.ClientStream
}

type starterStartComunicationClient struct {
	grpc.ClientStream
}

func (x *starterStartComunicationClient) Send(m *Member) error {
	return x.ClientStream.SendMsg(m)
}

func (x *starterStartComunicationClient) CloseAndRecv() (*Ack, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Ack)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StarterServer is the server API for Starter service.
// All implementations must embed UnimplementedStarterServer
// for forward compatibility
type StarterServer interface {
	StartComunication(Starter_StartComunicationServer) error
	mustEmbedUnimplementedStarterServer()
}

// UnimplementedStarterServer must be embedded to have forward compatible implementations.
type UnimplementedStarterServer struct {
}

func (UnimplementedStarterServer) StartComunication(Starter_StartComunicationServer) error {
	return status.Errorf(codes.Unimplemented, "method StartComunication not implemented")
}
func (UnimplementedStarterServer) mustEmbedUnimplementedStarterServer() {}

// UnsafeStarterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StarterServer will
// result in compilation errors.
type UnsafeStarterServer interface {
	mustEmbedUnimplementedStarterServer()
}

func RegisterStarterServer(s grpc.ServiceRegistrar, srv StarterServer) {
	s.RegisterService(&Starter_ServiceDesc, srv)
}

func _Starter_StartComunication_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StarterServer).StartComunication(&starterStartComunicationServer{stream})
}

type Starter_StartComunicationServer interface {
	SendAndClose(*Ack) error
	Recv() (*Member, error)
	grpc.ServerStream
}

type starterStartComunicationServer struct {
	grpc.ServerStream
}

func (x *starterStartComunicationServer) SendAndClose(m *Ack) error {
	return x.ServerStream.SendMsg(m)
}

func (x *starterStartComunicationServer) Recv() (*Member, error) {
	m := new(Member)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Starter_ServiceDesc is the grpc.ServiceDesc for Starter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Starter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Starter",
	HandlerType: (*StarterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartComunication",
			Handler:       _Starter_StartComunication_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "starter.proto",
}
