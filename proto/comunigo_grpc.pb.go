// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ComunigoClient is the client API for Comunigo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ComunigoClient interface {
	SendFromPeerToSequencer(ctx context.Context, in *RawMessage, opts ...grpc.CallOption) (*empty.Empty, error)
	SendFromSequencerToPeer(ctx context.Context, in *SequencerMessage, opts ...grpc.CallOption) (*empty.Empty, error)
	SendUpdateP2PScalar(ctx context.Context, in *ScalarClockMessage, opts ...grpc.CallOption) (*empty.Empty, error)
	SendAckP2PScalar(ctx context.Context, in *ScalarClockAck, opts ...grpc.CallOption) (*empty.Empty, error)
	SendUpdateP2PVectorial(ctx context.Context, in *VectorialClockMessage, opts ...grpc.CallOption) (*empty.Empty, error)
}

type comunigoClient struct {
	cc grpc.ClientConnInterface
}

func NewComunigoClient(cc grpc.ClientConnInterface) ComunigoClient {
	return &comunigoClient{cc}
}

func (c *comunigoClient) SendFromPeerToSequencer(ctx context.Context, in *RawMessage, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.Comunigo/SendFromPeerToSequencer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *comunigoClient) SendFromSequencerToPeer(ctx context.Context, in *SequencerMessage, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.Comunigo/SendFromSequencerToPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *comunigoClient) SendUpdateP2PScalar(ctx context.Context, in *ScalarClockMessage, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.Comunigo/SendUpdateP2PScalar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *comunigoClient) SendAckP2PScalar(ctx context.Context, in *ScalarClockAck, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.Comunigo/SendAckP2PScalar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *comunigoClient) SendUpdateP2PVectorial(ctx context.Context, in *VectorialClockMessage, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.Comunigo/SendUpdateP2PVectorial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComunigoServer is the server API for Comunigo service.
// All implementations must embed UnimplementedComunigoServer
// for forward compatibility
type ComunigoServer interface {
	SendFromPeerToSequencer(context.Context, *RawMessage) (*empty.Empty, error)
	SendFromSequencerToPeer(context.Context, *SequencerMessage) (*empty.Empty, error)
	SendUpdateP2PScalar(context.Context, *ScalarClockMessage) (*empty.Empty, error)
	SendAckP2PScalar(context.Context, *ScalarClockAck) (*empty.Empty, error)
	SendUpdateP2PVectorial(context.Context, *VectorialClockMessage) (*empty.Empty, error)
	mustEmbedUnimplementedComunigoServer()
}

// UnimplementedComunigoServer must be embedded to have forward compatible implementations.
type UnimplementedComunigoServer struct {
}

func (UnimplementedComunigoServer) SendFromPeerToSequencer(context.Context, *RawMessage) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFromPeerToSequencer not implemented")
}
func (UnimplementedComunigoServer) SendFromSequencerToPeer(context.Context, *SequencerMessage) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFromSequencerToPeer not implemented")
}
func (UnimplementedComunigoServer) SendUpdateP2PScalar(context.Context, *ScalarClockMessage) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendUpdateP2PScalar not implemented")
}
func (UnimplementedComunigoServer) SendAckP2PScalar(context.Context, *ScalarClockAck) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAckP2PScalar not implemented")
}
func (UnimplementedComunigoServer) SendUpdateP2PVectorial(context.Context, *VectorialClockMessage) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendUpdateP2PVectorial not implemented")
}
func (UnimplementedComunigoServer) mustEmbedUnimplementedComunigoServer() {}

// UnsafeComunigoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComunigoServer will
// result in compilation errors.
type UnsafeComunigoServer interface {
	mustEmbedUnimplementedComunigoServer()
}

func RegisterComunigoServer(s grpc.ServiceRegistrar, srv ComunigoServer) {
	s.RegisterService(&Comunigo_ServiceDesc, srv)
}

func _Comunigo_SendFromPeerToSequencer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComunigoServer).SendFromPeerToSequencer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Comunigo/SendFromPeerToSequencer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComunigoServer).SendFromPeerToSequencer(ctx, req.(*RawMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comunigo_SendFromSequencerToPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SequencerMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComunigoServer).SendFromSequencerToPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Comunigo/SendFromSequencerToPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComunigoServer).SendFromSequencerToPeer(ctx, req.(*SequencerMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comunigo_SendUpdateP2PScalar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScalarClockMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComunigoServer).SendUpdateP2PScalar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Comunigo/SendUpdateP2PScalar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComunigoServer).SendUpdateP2PScalar(ctx, req.(*ScalarClockMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comunigo_SendAckP2PScalar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScalarClockAck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComunigoServer).SendAckP2PScalar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Comunigo/SendAckP2PScalar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComunigoServer).SendAckP2PScalar(ctx, req.(*ScalarClockAck))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comunigo_SendUpdateP2PVectorial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VectorialClockMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComunigoServer).SendUpdateP2PVectorial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Comunigo/SendUpdateP2PVectorial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComunigoServer).SendUpdateP2PVectorial(ctx, req.(*VectorialClockMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// Comunigo_ServiceDesc is the grpc.ServiceDesc for Comunigo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Comunigo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Comunigo",
	HandlerType: (*ComunigoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendFromPeerToSequencer",
			Handler:    _Comunigo_SendFromPeerToSequencer_Handler,
		},
		{
			MethodName: "SendFromSequencerToPeer",
			Handler:    _Comunigo_SendFromSequencerToPeer_Handler,
		},
		{
			MethodName: "SendUpdateP2PScalar",
			Handler:    _Comunigo_SendUpdateP2PScalar_Handler,
		},
		{
			MethodName: "SendAckP2PScalar",
			Handler:    _Comunigo_SendAckP2PScalar_Handler,
		},
		{
			MethodName: "SendUpdateP2PVectorial",
			Handler:    _Comunigo_SendUpdateP2PVectorial_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/comunigo.proto",
}
