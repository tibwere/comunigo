// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RegistrationClient is the client API for Registration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegistrationClient interface {
	Sign(ctx context.Context, in *NewUser, opts ...grpc.CallOption) (Registration_SignClient, error)
	StartSequencer(ctx context.Context, opts ...grpc.CallOption) (Registration_StartSequencerClient, error)
}

type registrationClient struct {
	cc grpc.ClientConnInterface
}

func NewRegistrationClient(cc grpc.ClientConnInterface) RegistrationClient {
	return &registrationClient{cc}
}

func (c *registrationClient) Sign(ctx context.Context, in *NewUser, opts ...grpc.CallOption) (Registration_SignClient, error) {
	stream, err := c.cc.NewStream(ctx, &Registration_ServiceDesc.Streams[0], "/proto.Registration/Sign", opts...)
	if err != nil {
		return nil, err
	}
	x := &registrationSignClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Registration_SignClient interface {
	Recv() (*ClientInfo, error)
	grpc.ClientStream
}

type registrationSignClient struct {
	grpc.ClientStream
}

func (x *registrationSignClient) Recv() (*ClientInfo, error) {
	m := new(ClientInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *registrationClient) StartSequencer(ctx context.Context, opts ...grpc.CallOption) (Registration_StartSequencerClient, error) {
	stream, err := c.cc.NewStream(ctx, &Registration_ServiceDesc.Streams[1], "/proto.Registration/StartSequencer", opts...)
	if err != nil {
		return nil, err
	}
	x := &registrationStartSequencerClient{stream}
	return x, nil
}

type Registration_StartSequencerClient interface {
	Send(*ClientInfo) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type registrationStartSequencerClient struct {
	grpc.ClientStream
}

func (x *registrationStartSequencerClient) Send(m *ClientInfo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *registrationStartSequencerClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RegistrationServer is the server API for Registration service.
// All implementations must embed UnimplementedRegistrationServer
// for forward compatibility
type RegistrationServer interface {
	Sign(*NewUser, Registration_SignServer) error
	StartSequencer(Registration_StartSequencerServer) error
	mustEmbedUnimplementedRegistrationServer()
}

// UnimplementedRegistrationServer must be embedded to have forward compatible implementations.
type UnimplementedRegistrationServer struct {
}

func (UnimplementedRegistrationServer) Sign(*NewUser, Registration_SignServer) error {
	return status.Errorf(codes.Unimplemented, "method Sign not implemented")
}
func (UnimplementedRegistrationServer) StartSequencer(Registration_StartSequencerServer) error {
	return status.Errorf(codes.Unimplemented, "method StartSequencer not implemented")
}
func (UnimplementedRegistrationServer) mustEmbedUnimplementedRegistrationServer() {}

// UnsafeRegistrationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegistrationServer will
// result in compilation errors.
type UnsafeRegistrationServer interface {
	mustEmbedUnimplementedRegistrationServer()
}

func RegisterRegistrationServer(s grpc.ServiceRegistrar, srv RegistrationServer) {
	s.RegisterService(&Registration_ServiceDesc, srv)
}

func _Registration_Sign_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NewUser)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RegistrationServer).Sign(m, &registrationSignServer{stream})
}

type Registration_SignServer interface {
	Send(*ClientInfo) error
	grpc.ServerStream
}

type registrationSignServer struct {
	grpc.ServerStream
}

func (x *registrationSignServer) Send(m *ClientInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _Registration_StartSequencer_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RegistrationServer).StartSequencer(&registrationStartSequencerServer{stream})
}

type Registration_StartSequencerServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*ClientInfo, error)
	grpc.ServerStream
}

type registrationStartSequencerServer struct {
	grpc.ServerStream
}

func (x *registrationStartSequencerServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *registrationStartSequencerServer) Recv() (*ClientInfo, error) {
	m := new(ClientInfo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Registration_ServiceDesc is the grpc.ServiceDesc for Registration service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Registration_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Registration",
	HandlerType: (*RegistrationServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Sign",
			Handler:       _Registration_Sign_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StartSequencer",
			Handler:       _Registration_StartSequencer_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/registration.proto",
}
